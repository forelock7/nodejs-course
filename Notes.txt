////////////////////////////////////////////////////////////////////////////////////////////////
Section 2: V8: The Javascript Engine
////////////////////////////////////////////////////////////////////////////////////////////////

- Levels of programmig language

1. Machine Language
2. Assembly Language
3. C/C++
4. JavaScript

- Node is written in C++
- V8 is written in C++

- ECMAScript - standart Javascript is based on
- JavaScript - language

- JavaScript engine - program taht converts JS code into something the computer precessor can understand.

- V8 is Google's open source JavaSript engine. Written in C++. Implements ECMAScript as specified. It was created to execute in Chrome browser

- JavaScript Code -> V8 engine(converts/interprete/compile) -> Machine Code

////////////////////////////////////////////////////////////////////////////////////////////////
Section 3: The Node Core
////////////////////////////////////////////////////////////////////////////////////////////////

- Client(Browser - JS) <--HTTP--> Server(WebServer - Js)

- Run NodeJS file:
  node app.js

////////////////////////////////////////////////////////////////////////////////////////////////
Section 4: Modules, Exports, and Require
////////////////////////////////////////////////////////////////////////////////////////////////

- Main objects:

1. Modules - reusable block of code (impact other code).
2. Exports
3. Require

- Commonjs modules - an agreed upon standart for how code modules should be structured

- First-Class Function - everything you can do with other types you can do with functions. You can use functions like string, numbers, etc. (i.e. pass them around, set variables equal to them, put them in arrays ...)

- Function Expression - a block of code that results in a value. Function expressions are possible in JS because functions are first-class.

- function statement (declaration)
  function greet() {
  console.log("hi");
  }
  greet();

- function are first-class
  function logGreeting(fn) {
  fn();
  }
  logGreeting(greet);

- function expression
  var greetMe = function () {
  console.log("Hi Vova");
  };
  greetMe();
- It's still first-class
  logGreeting(greetMe);

// use a function expression on the fly
logGreeting(function () {
console.log("Hello Tony");
});

- Use module in another JS script file
  require("./greet.js");

- Not only execute all in module, but also get/invoke particular func
- Module (greet.js)
  var greet = function () {
  console.log("Hello!");
  };
  module.exports = greet;
- JS file (app.js)
  var greet = require("./greet");
  greet();

- Local variables for each JS script file
  **dirname
  **filename
  exports
  module
  require
  this

- Name/Value pair - a name which maps to a value. The name may be defines more than once, but only can have one value in any given context. That value may be more name/value pairs.
Address = 'Main Street'

- Object - collection of name/value pairs
+ Primitive(property)
+ Object(property)
+ Function(method)

- Object literal - name/vale pairs separated by commas and surrounded by curly braces. This is just a quick, shorthand way to create JS object in code
{
  Street: 'Main',
  Number: 100,
  App: {
    num: 4,
  }
}

- Get propertis from object
var person = {
  firstname: "John",
  lastname: "Doe",
  greet: function () {
    console.log("Hello, " + this.firstname + " " + this.lastname);
  },
};
person.greet();
person["firstname"];

- Inheritance implemented by Prototype chain via proto property
prototype - function
__proto__ - property
function Person(firstname, lastname) {
  this.firstname = firstname;
  this.lastname = lastname;
}
Person.prototype.greet = function () {
  console.log('Hello, ' + this.firstname + ' ' + this.lastname);
};
var john = new Person('John', 'Doe');
console.log(john.__proto__);

- Primitive - a type of data that represents a single value, like a number or a string, not a object.

- Primitive - pass by value
- Objects - pass by reference

-  Scope - where in code you have access to particular var of function

- immediately invoked function expression
(function() {
}())

- if we use require, it actually take all code from that module and wrapped it into an immediately invoked function expression
var greet = require('./greet');
greet();
- IIFE:
(function (exports, require, module, __filename, __dirname) {
  var greet = function() {
	console.log('Hello!');
};
module.exports = greet;
});

- JSON - JS Object Notation

- set function to empty 'export' object and call it
module.exports = function () {
  console.log('Hello World');
};
--------
var greet = require('./greet1');
greet();

- set function to 'greet' property of 'export' object and call it
module.exports.greet = function () {
  console.log('Hello World');
};
------
var greet2 = require('./greet2').greet;
greet2();

- set object to empty 'export' object and call it
function Greetr() {
  this.greeting = 'Hello world!!';
  this.greet = function () {
    console.log(this.greeting);
  };
}
module.exports = new Greetr();
----
var greet3 = require('./greet3');
greet3.greet();

- if we call require with object - we'll get the same object because it is cached.
greet3.greeting = 'Changed Hello world!!';
var greet3b = require('./greet3');
greet3b.greet(); // Changed Hello world!!

- To avoid caching just export not object, but constructor
function Greetr() {
  this.greeting = 'Hello world!!!';
  this.greet = function () {
    console.log(this.greeting);
  };
}
module.exports = Greetr;
-----
var Greet4 = require('./greet4');
var grtr = new Greet4();
grtr.greet();

- revieling module pattern - exposing only the cproperties and methods you want via an returned object
var greeting = 'Hello world!!!!';
function greet() {
  console.log(greeting);
}
module.exports = {
  greet: greet,
};
-----
var greet5 = require('./greet5').greet;
greet5();

- In JS if variable set equal to value - new object created

- Mutate - to change something

////////////////////////////////////////////////////////////////////////////////////////////////
Section 5: Events and the Event Emitter
////////////////////////////////////////////////////////////////////////////////////////////////

- Call of object property:
obj.greet;
obj['greet'];

- You can put function as item to array

- Event Listener - code that responds to Event

- magic string - string that has some special meaning in our code. This is bad because it makes it easy for a typo to cause a bug, and hard tools to help us find it.

- Object.create method by existing object
var person = {
  firstname: '',
  lastname: '',
  greet: function () {
    return this.firstname + ' ' + this.lastname;
  },
};
var john = Object.create(person);

- babeljs.io - convert new syntex (ES6) to old versions (NodeJS, ES5) for old versions of browsers

- Template Literal - a way to concatenate strings in JS (ES6). Easier to work with than a bunch of strings concatenated with '+'. It used backticks:
`Hallo ${name}` 

- call methods within differetn oblects:
var obj = {
  name: 'John Doe',
  greet: function () {
    console.log(`Hello ${this.name}`);
  },
};
obj.greet();
obj.greet.call({ name: 'Jane Doe' }, param, param2);
obj.greet.apply({ name: 'Jane Amm Doe' }, [param, param2]);

- Classes - feature of ES6

- Syntactic sugar - a feature that only changes how you type something, but nothing changes under the hood

- Inheritance (Nodejs, ES5):
function Page() {
  BasePage.call(this);
  this.headerLocator = '/h'
}
util.inherits(Page, BasePage)

- Inheritance (ES6):
class Page extends BasePage{
  constructor() {
    super()
    this.headerLocator = '/div'
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////
Section 6: Asynchronous Code, libuv, The Event Loop, Streams, Files, and moreâ€¦
////////////////////////////////////////////////////////////////////////////////////////////////

- Asynchronous - more than one process running simultaneously
- Synchronous - one process executing at a time

- JavaScript is synchronous/ Only one line of code executing at a time
- NodeJS is asynchronous. Node does things asynchronous. V8 does not.

- Callback - function passed to some other function, which we assume will be invoke at some point. 
function(someOtherFunc) {
  someOtherFunc();
}

- System Events - C++ Core (libuv)
- Custom Events = JavaScript Core (Event Emitter)

- Non-Blocking - doing other things without stopping your programming from running. This is made possible by Node's doing things asynchronously.

- Buffer - a temporary holding spot for data being moved from one place to another. Intentionally limited in size.

- Stream - a sequence of data made available over time. Pieces of data that eventually combine into a whole.

- Buffer is used within a stream for some processes.

-  Binary data - data stored in binary (sets of 1s and 0s). The core of the math that computers are based on. Each one or zero is called a 'bit' or 'binary digit'. Based 2(binary)
0101

- Character Set - a representation of characters as numbers. Each character gets a number. Unicode and ASCII are character sets.
hello -> 104 101 108 108 111 (by Unicode Character Set)

- Character Encoding - how characters are stored in binery. The numbers (or code points) are converted and stored in binary.
hello -> 104 101 108 108 111 (by Unicode Character Set) -> 01101000 01100101c01101100 01101100 01101111c (UTF-8 Character Encoding)

- Shortcut of current directory: __dirname
var fs = require('fs');
var greet = fs.readFileSync(__dirname + '/greet.txt', 'utf8')

- Error-First Callback - callbacks take an error object as their first parameter. null if no error, otherwise will contain an object defining the error. This is a standart so we know in what order to place our parameters for our callbacks.
var greet2 = fs.readFile(
  __dirname + '/greet.txt',
  'utf8',
  function (err, data) {
    console.log(data);
  }
);

- Chunk - a peace of data being sent through a stream. Data is split in 'chunks' and streamed.

- Abstract class - a type of constructor you never work directly with, but inherit from

- Pipe - connecting two streams by writing to one stream what is being read from another. In Node you pipe from a Readable stream to a Writable stream.

- Method Chaining - a method returns an object so we can keep calling more methods. Sometimes it returns the parent object (called 'cascading') and sometimes some other object
readable.pipe(gzip).pipe(compressed);

- Use streams and pipes in NodeJS

////////////////////////////////////////////////////////////////////////////////////////////////
Section 7: HTTP and being a Web Server
////////////////////////////////////////////////////////////////////////////////////////////////

- Protocol - set of rules two sides agree on to use when connunicating. 

- Socket creates channel between Browser and Web Server to deliver data
- HTTP, FTP protocol in WHICH format to deliver data
- IP protocol helps identify (FRPM WHAT and WHERE) both client and Server
- TCP is actually use HOW to deliver data splitting it into pieces (Packet)

- Port - once a computer receives a Packet, how it knows what program to send it to. When a program is setup on the OS to receive packets from a particular port, it is said that the program is 'listening' to that port.

- Socket address: 32.32.43.32:443

- HTTP - a set of rules (and a format) for data being transferred on the Web. This format data is send by TCP/IP.

- MIME type - a standart for specifying the type of data being sent. Stands for 'Mutipurpose Internet Mail Extensions': application/json, text/html, image/jpeg

- http-parser - C++ lib parse information for http requests/responces

- Template - text designed to be the basic for final text or content after being processed. There is usually some specific template language? so the template system knows how to replace placeholders with real values.

- API - a set oof tools for building a software application. On the web the tools are usually made available via a set of URLs which accept and send only data via HTTP and TCP/IP

- Endpoint - one particular URL in a Web API. Sometimes that endpoint (URL) does multiple thing by making choices based on the HTTP request headers.

- Serialize - translate an object into a format that can be stored or transferred. into ---> JSON, CSV, XML and others are popular. 
var obj = {
      firstname: 'John',
      lastname: 'Doe',
    };
res.end(JSON.stringify(obj));
- Deserialize - opposite (converting the format back into ---> an object)

- Routing - mapping HTTP requests to content. Whether actual files that exist on the server, or not

////////////////////////////////////////////////////////////////////////////////////////////////
Section 8: NPM: the Node Package Manager
////////////////////////////////////////////////////////////////////////////////////////////////

- Package - code. Managed and maintained with a package managment system

- Package managment system - software that automates installing and updating packages. Deals with what version you have or need, and manages dependencies.

- Dependencies - code that another set of code depends on to function. If you use that code in your app, it's a dependency. Your app depends on it

- Versioning: 'major'.'minor'.'patch'
2.5.7

- npm registry - repository of packages
- npm program

- create js project
 npm init

 - install package 'moment' and save a refference to the package in dependancy
 npm install moment --save
 --------
    "dependencies": {
    "moment": "~2.29.4"
  }

 - automaticaly update up ONLY to '_'.'minor'.'patch'
   "dependencies": {
    "moment": "^2.29.4"
  }

 - automaticaly update up ONLY to '_'.'_'.'patch'
   "dependencies": {
    "moment": "~2.29.4"
  }

- Install all dependancy in 'package.json'
npm install

- Install dependancy only for development
npm install jasmine-node --save-dev
---------
  "devDependencies": {
    "jasmine-node": "^3.0.0"
  }

- Globally install package, not for only one particular project:
npm install -g nodemon

- If you need change some code and see the updates without restarting 'node app.js' just use nodemon:
nodemon app.js

- Update all modules regarding '^' and '~' rules:
npm update

////////////////////////////////////////////////////////////////////////////////////////////////
Section 9: Express
////////////////////////////////////////////////////////////////////////////////////////////////

- Environment variables - global vars specific to the env (server) our code is living in. Different servers can have different variable settings, and we can access thos in code

- HTTP Method - specifies the type of action the request wishes to make. GET, POST? DELETE? and others. Also called verbs

- Middleware - code that sits between two layers of software. In the case of Express, sitting between the request and the response. It's used for cookies, password ets.

- Static - not dynemic. In other words, not processed by code in any way. For example HTML, CSS and image filesare 'static' files

- Templates engine: EJS - dynemic generate html on fly

- REST - an architechtual style for building APIs. representational State Transfer. We decided that HTTP verbs and URLs mean something

- 'Express generator' lib helps us to create structire for express code project
npm install -g express-generator
express myapp
npm install

- Look at Router instances in code.